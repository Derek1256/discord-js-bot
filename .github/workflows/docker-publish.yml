name: Publish Docker image

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: ghcr.io/derek1256/discord-js-bot

jobs:
  push_to_registry:
    name: Push Docker image to GitHub Container Registry
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Extract current version from package.json
        id: current_version
        run: echo "CURRENT_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Get latest tag from GitHub Container Registry
        id: latest_tag
        run: |
          LATEST_TAG=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://ghcr.io/v2/${{ github.repository_owner }}/discord-js-bot/tags/list" \
          | jq -r '.tags | map(select(test("^([0-9]+\\.[0-9]+\\.[0-9]+)$"))) | max')
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Calculate next version
        id: next_version
        run: |
          IFS='.' read -r -a version_parts <<< "$LATEST_TAG"
          version_parts[2]=$((version_parts[2] + 1))
          NEXT_VERSION="${version_parts[0]}.${version_parts[1]}.${version_parts[2]}"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ env.NEXT_VERSION }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: false
